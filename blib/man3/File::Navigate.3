.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Navigate 3"
.TH Navigate 3 "2008-01-09" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
File::Navigate \- Navigate freely inside a text file
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The module is a glorified wrapper for \fItell()\fR and \fIseek()\fR. 
.PP
It aims to simplify the creation of logfile analysis tools by 
providing a facility to jump around freely inside the contents
of large files without creating the need to slurp excessive 
amounts of data.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use File::Navigate;
\&  my $nav = File::Navigate->new('/var/log/messages');
.Ve
.PP
.Vb 2
\&  # Read what's below the "cursor":
\&  my $first = $nav->get;
.Ve
.PP
.Vb 3
\&  # Advance the cursor before reading:
\&  my $second = $nav->getnext;
\&  my $third  = $nav->getnext;
.Ve
.PP
.Vb 3
\&  # Advance the cursor by hand:
\&  $nav->next;
\&  my $fourth = $nav->get;
.Ve
.PP
.Vb 3
\&  # Position the cursor onto an arbitrary line:
\&  $nav->cursor(10);
\&  my $tenth  = $nav->get;
.Ve
.PP
.Vb 3
\&  # Reverse the cursor one line backward:
\&  $nav->prev;
\&  my $ninth  = $nav->get;
.Ve
.PP
.Vb 2
\&  # Reverse the cursor before reading:
\&  my $eigth  = $nav->getprev;
.Ve
.PP
.Vb 2
\&  # Read an arbitrary line:
\&  my $sixth  = $nav->get(6);
.Ve
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.Sh "\fInew()\fP"
.IX Subsection "new()"
Open the file and create an index of the lines inside of it.
.PP
.Vb 1
\&  my $mapper = File::Navigate->new($filename);
.Ve
.SH "OBJECT METHODS"
.IX Header "OBJECT METHODS"
.Sh "\fIcount()\fP"
.IX Subsection "count()"
Returns the number of lines in the file (\*(L"wc \-l\*(R")
.PP
.Vb 1
\&  my $lines = $nav->count;
.Ve
.Sh "\fIcursor()\fP"
.IX Subsection "cursor()"
Returns the current cursor position and/or sets the cursor.
.PP
.Vb 2
\&  my $cursor = $nav->cursor();   # Query cursor position.
\&  my $cursor = $nav->cursor(10); # Set cursor to line 10
.Ve
.Sh "\fIget()\fP"
.IX Subsection "get()"
Gets the line at the cursor position or at the given position.
.PP
.Vb 2
\&  my $line = $nav->get();   # Get line at cursor
\&  my $line = $nav->get(10); # Get line 10
.Ve
.Sh "\fInext()\fP"
.IX Subsection "next()"
Advance the cursor position by one line. Returns the new cursor position.
Returns \fIundef\fR if the cursor is already on the last line. 
.PP
.Vb 1
\&  my $newcursor = $nav->next();
.Ve
.Sh "\fIprev()\fP"
.IX Subsection "prev()"
Reverse the cursor position by one line. Returns the new cursor position.
Returns \fIundef\fR if the cursor is already on line 1. 
.PP
.Vb 1
\&  my $newcursor = $nav->prev();
.Ve
.Sh "\fIgetnext()\fP"
.IX Subsection "getnext()"
Advance to the next line and return it.
Returns \fIundef\fR if the cursor is already on the last line. 
.PP
.Vb 1
\&  my $newcursor = $nav->getnext();
.Ve
.Sh "\fIgetprev()\fP"
.IX Subsection "getprev()"
Reverse to the previous line and return it:
Returns \fIundef\fR if the cursor is already on line 1. 
.PP
.Vb 1
\&  my $newcursor = $nav->getprev();
.Ve
.Sh "\fIfind()\fP"
.IX Subsection "find()"
Find lines containing given regex. Returns array with line numbers.
.PP
.Vb 1
\&  my @lines = @{$nav->find(qr/foo/)};
.Ve
.SH "EXAMPLE"
.IX Header "EXAMPLE"
\&\fItac\fR, the opposite of \fIcat\fR, in Perl using File::Navigate:
.PP
.Vb 3
\&  #!/usr/bin/perl -w
\&  use strict;
\&  use File::Navigate;
.Ve
.PP
.Vb 6
\&  foreach my $file (reverse(@ARGV)){
\&          my $nav = File::Navigate->new($file);
\&          # Force cursor beyond last line
\&          $nav->cursor($nav->length()+1);
\&          print $nav->get()."\en" while $nav->prev();
\&  }
.Ve
.SH "BUGS"
.IX Header "BUGS"
Seems to lack proper error handling. 
.SH "LIMITATIONS"
.IX Header "LIMITATIONS"
Works only on plain text files. Sockets, \s-1STDIO\s0 etc. are not supported.
.SH "PREREQUISITES"
.IX Header "PREREQUISITES"
Tested on Perl 5.6.1.
.SH "STATUS"
.IX Header "STATUS"
Mostly harmless.
.SH "AUTHOR"
.IX Header "AUTHOR"
Martin Schmitt <mas at scsy dot de>
